{"ast":null,"code":"var _jsxFileName = \"/Users/Briana/repos/quizzical-trivia-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Welcome from './components/Welcome';\nimport QuizPage from './components/QuizPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [started, setStarted] = useState(false);\n  const [quizData, setQuizData] = useState([]);\n  const [playAgain, setPlayAgain] = useState(false);\n  const [quizState, setQuizState] = useState(getQuizState());\n  const [allAnswered, setAllAnswered] = useState(false);\n  const [checkAnswers, setCheckAnswers] = useState(false);\n  const [numCorrectAnswers, setNumCorrectAnswers] = useState(null);\n  //will add check for perfect score to render confetti \n  const [perfectScore, setPerfectScore] = useState(false);\n  function startQuiz() {\n    setStarted(true);\n  }\n  function newGame(event) {\n    event.preventDefault();\n    console.log('Play Again');\n    //setPlayAgain(true);\n  }\n\n  useEffect(() => {\n    async function getQuizData() {\n      const res = await fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\");\n      const data = await res.json();\n      setQuizData(data.results);\n    }\n    getQuizData();\n  }, [playAgain]);\n\n  //when setting newgame:\n  // quizstate needs to reset\n  // allAnswered > false\n  //checkAnswers > false\n  //numCorrectAnswers > null\n  //!perfectScore ? do nothing : setPerfectScore(true)\n\n  //helper function to shuffle answers\n  function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n  function getQuizState() {\n    return quizData.map(question => {\n      return {\n        id: question.question,\n        incorrectAnswers: question.incorrect_answers,\n        correctAnswer: question.correct_answer,\n        answers: null,\n        selectedAnswer: null\n      };\n    });\n  }\n  //shuffle answers only once\n  useEffect(() => {\n    setQuizState(() => {\n      return quizData.map(question => {\n        return {\n          id: question.question,\n          incorrectAnswers: question.incorrect_answers,\n          correctAnswer: question.correct_answer,\n          answers: shuffle([...question.incorrect_answers, question.correct_answer]),\n          selectedAnswer: null\n        };\n      });\n    });\n  }, []);\n  useEffect(() => {\n    const answersArray = quizState.filter(question => !question.selectedAnswer);\n    if (answersArray.length === 0) {\n      setAllAnswered(true);\n    }\n  }, [quizState]);\n  function handleChange(event, id) {\n    const {\n      value\n    } = event.target;\n    setQuizState(prev => {\n      return prev.map(question => {\n        return question.id === id ? {\n          ...question,\n          selectedAnswer: value\n        } : question;\n      });\n    });\n  }\n  //console.log(quizState)\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (allAnswered) {\n      const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer);\n      setNumCorrectAnswers(scoreAnswersArray.length);\n      setCheckAnswers(true);\n      if (numCorrectAnswers === 5) {\n        setPerfectScore(true);\n      }\n    } else {\n      return false;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Welcome, {\n      startQuiz: startQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), started && /*#__PURE__*/_jsxDEV(QuizPage, {\n      started: started,\n      quizData: quizData,\n      quizState: quizState,\n      allAnswered: allAnswered,\n      checkAnswers: checkAnswers,\n      numCorrectAnswers: numCorrectAnswers,\n      perfectScore: perfectScore,\n      handleChange: handleChange,\n      handleSubmit: handleSubmit,\n      newGame: newGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n//when setting newgame:\n// quizstate needs to reset\n// allAnswered > false\n//checkAnswers > false\n//numCorrectAnswers > null\n//!perfectScore ? do nothing : setPerfectScore(true)\n_s(App, \"DOxnBPdCZ/Fu9LYbHN3eHQNkHFY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Welcome","QuizPage","App","started","setStarted","quizData","setQuizData","playAgain","setPlayAgain","quizState","setQuizState","getQuizState","allAnswered","setAllAnswered","checkAnswers","setCheckAnswers","numCorrectAnswers","setNumCorrectAnswers","perfectScore","setPerfectScore","startQuiz","newGame","event","preventDefault","console","log","getQuizData","res","fetch","data","json","results","shuffle","array","i","length","j","Math","floor","random","map","question","id","incorrectAnswers","incorrect_answers","correctAnswer","correct_answer","answers","selectedAnswer","answersArray","filter","handleChange","value","target","prev","handleSubmit","scoreAnswersArray"],"sources":["/Users/Briana/repos/quizzical-trivia-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Welcome from './components/Welcome';\nimport QuizPage from './components/QuizPage';\n\nexport default function App() {\n  const [started, setStarted] = useState(false);\n  const [quizData, setQuizData] = useState([]);\n  const [playAgain, setPlayAgain] = useState(false);\n  const [quizState, setQuizState] = useState(getQuizState());\n  const [allAnswered, setAllAnswered] = useState(false);\n  const [checkAnswers, setCheckAnswers] = useState(false);\n  const [numCorrectAnswers, setNumCorrectAnswers] = useState(null);\n  //will add check for perfect score to render confetti \n  const [perfectScore, setPerfectScore] = useState(false);\n\n  function startQuiz() {\n    setStarted(true);\n  }\n\n  function newGame(event) {\n    event.preventDefault();\n    console.log('Play Again')\n    //setPlayAgain(true);\n  }\n\n  useEffect(() => {\n    async function getQuizData() {\n      const res = await fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\");\n      const data = await res.json();\n      setQuizData(data.results);\n    }\n    getQuizData();\n  }, [playAgain])\n\n    \n    \n    //when setting newgame:\n    // quizstate needs to reset\n    // allAnswered > false\n    //checkAnswers > false\n    //numCorrectAnswers > null\n    //!perfectScore ? do nothing : setPerfectScore(true)\n\n\n    //helper function to shuffle answers\n    function shuffle(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n          [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n    \n    function getQuizState() {\n        return (quizData.map(question => {\n            return ({\n                id: question.question,\n                incorrectAnswers: question.incorrect_answers,\n                correctAnswer: question.correct_answer,\n                answers: null,\n                selectedAnswer: null\n            })\n        }))\n    }    \n    //shuffle answers only once\n    useEffect(() => {\n        setQuizState(() => {\n            return (quizData.map(question => {\n                return ({\n                    id: question.question,\n                    incorrectAnswers: question.incorrect_answers,\n                    correctAnswer: question.correct_answer,\n                    answers: shuffle([...question.incorrect_answers, question.correct_answer]),\n                    selectedAnswer: null\n                })\n            }))\n        })\n    }, []);\n\n    useEffect(() => {\n        const answersArray = quizState.filter(question => !question.selectedAnswer )\n        if (answersArray.length === 0) {\n            setAllAnswered(true);\n        } \n    }, [quizState]);\n    \n  \n    function handleChange(event, id) {\n      const { value } = event.target;\n      setQuizState(prev => {\n          return (prev.map(question => {\n              return question.id === id ? {...question, selectedAnswer: value} : question\n          }))\n      })\n  }\n  //console.log(quizState)\n\n  function handleSubmit(event) {\n      event.preventDefault();\n      if (allAnswered) {\n          const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer)\n          setNumCorrectAnswers(scoreAnswersArray.length);\n          setCheckAnswers(true);\n          if (numCorrectAnswers === 5) {\n              setPerfectScore(true);\n          }\n      } else {\n          return false;\n      }\n      \n  }\n\n  return (\n    <div className=\"App\">\n      <Welcome startQuiz={startQuiz}/>\n      {started &&<QuizPage \n                    started={started} \n                    quizData={quizData}\n                    quizState={quizState}\n                    allAnswered={allAnswered}\n                    checkAnswers={checkAnswers}\n                    numCorrectAnswers={numCorrectAnswers}\n                    perfectScore={perfectScore}\n                    handleChange={handleChange}\n                    handleSubmit={handleSubmit}\n                    newGame={newGame}/>}\n    </div>\n  );\n}\n\n\n//when setting newgame:\n    // quizstate needs to reset\n    // allAnswered > false\n    //checkAnswers > false\n    //numCorrectAnswers > null\n    //!perfectScore ? do nothing : setPerfectScore(true)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}