{"ast":null,"code":"var _jsxFileName = \"/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\nimport Question from './Question';\nimport Answer from './Answer';\n//import Confetti from 'react-confetti';\nimport data from '../data';\nimport shuffle from '../shuffle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function QuizPage(props) {\n  _s();\n  const [quizState, setQuizState] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [allAnswered, setAllAnswered] = useState(false);\n  const [checkAnswers, setCheckAnswers] = useState(false);\n  const [numCorrectAnswers, setNumCorrectAnswers] = useState(null);\n  const [showErrorMsg, setShowErrorMsg] = useState(false);\n\n  /*Time to think about state. This is what will change based on user input:\n      1. The selected answer of each question\n      2. The button will only be active once all questions are answered.\n      3. The number of correct answers once submitted.\n  */\n\n  function getQuizState(rawDataArray) {\n    return rawDataArray.map(question => {\n      return {\n        id: question.question,\n        question: question.question,\n        incorrectAnswers: question.incorrect_answers,\n        correctAnswer: question.correct_answer,\n        answers: shuffle([...question.incorrect_answers, question.correct_answer]),\n        selectedAnswer: \"\"\n      };\n    });\n  }\n  async function fetchRawData() {\n    try {\n      const response = await fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\");\n      if (!response.ok) {\n        throw new Error(`This is an HTTP error: The status is ${response.status}`);\n      }\n      let rawData = await response.json();\n      setQuizState(getQuizState(rawData));\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n      setQuizState(null);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  ;\n  useEffect(() => fetchRawData(), []);\n\n  // useEffect(() => {\n  //     const answersArray = quizState.filter(question => !question.selectedAnswer )\n  //     if (answersArray.length === 0) {\n  //         setAllAnswered(true);\n  //     } \n  // }, [quizState]);\n\n  function handleChange(event, id) {\n    const {\n      value\n    } = event.target;\n    setQuizState(prev => {\n      return prev.map(question => {\n        return question.id === id ? {\n          ...question,\n          selectedAnswer: value\n        } : question;\n      });\n    });\n  }\n  ;\n\n  // function handleSubmit(event) {\n  //     event.preventDefault();\n  //     if (allAnswered) {\n  //         const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer)\n  //         setNumCorrectAnswers(scoreAnswersArray.length);\n  //         setCheckAnswers(true);\n  //         if (numCorrectAnswers === 5) {\n  //             props.setPerfectScore(true);\n  //         }\n  //     } else {\n  //         return false;\n  //     }\n\n  // )\n\n  const quizElements = quizState.map(question => /*#__PURE__*/_jsxDEV(QuizCard, {\n    children: [/*#__PURE__*/_jsxDEV(Question, {\n      question: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer, {\n      answer: question.answers[0],\n      id: question.id,\n      selectedAnswer: question.selectedAnswer,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer, {\n      answer: question.answers[1],\n      id: question.id,\n      selectedAnswer: question.selectedAnswer,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer, {\n      answer: question.answers[2],\n      id: question.id,\n      selectedAnswer: question.selectedAnswer,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer, {\n      answer: question.answers[3],\n      id: question.id,\n      selectedAnswer: question.selectedAnswer,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, nanoid(), true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"quiz-page\",\n      children: !isLoading && /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [quizElements, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: allAnswered ? 'button-check' : 'button-check button-check-disabled',\n            onMouseEnter: () => setShowErrorMsg(true),\n            onMouseLeave: () => setShowErrorMsg(false),\n            children: checkAnswers ? 'Play Again' : 'Check answers'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 21\n          }, this), showErrorMsg && !allAnswered && /*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"error-message\",\n            className: \"message\",\n            children: \"Please answer all questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 54\n          }, this), checkAnswers && /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"message\",\n            children: [\"You scored \", numCorrectAnswers, \"/5 correct answers\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(QuizPage, \"XUUHZOqMtNAIcu4rl4ASGsZlXrI=\");\n_c = QuizPage;\n{/* <main className= \"quiz-page\">\n <form onSubmit={checkAnswers ? (event)=>props.newGame(event) : handleSubmit}>\n    {quizElements}\n    <div className='btn-container'>\n        <button className={allAnswered ? 'button-check' : 'button-check button-check-disabled'}\n                onMouseEnter={() => setShowError(true)}\n                onMouseLeave={() => setShowError(false)}>\n            {checkAnswers ? 'Play Again' : 'Check answers'}\n        </button> \n        {showError && !allAnswered && <h3 id='error-message' className='message'>Please answer all questions</h3>}\n        {checkAnswers && <h3 className='message'>You scored {numCorrectAnswers}/5 correct answers</h3>}\n    </div>\n </form>\n </main> */}\n\n// //Get current question and save in variable for readability\n// function getCurrentQuestion() {\n//     const questionIndex = props.quizState.findIndex(question => question.id === props.id);\n//     return props.quizState[questionIndex];\n// }\n// const currentQuestion = getCurrentQuestion();\n\n// //Apply conditional styling after scoring answers\n// function getAnswerClass(index) {\n//     if (props.checkAnswers) {\n//         if (currentQuestion.answers[index] === currentQuestion.correctAnswer) {\n//             return ({\n//                 backgroundColor: '#94D7A2',\n//                 borderColor: '#94D7A2'\n//             })\n//         } else if (currentQuestion.selectedAnswer === currentQuestion.answers[index]) {\n//             return ({\n//                 backgroundColor: '#F8BCBC',\n//                 borderColor: '#F8BCBC',\n//                 opacity: 0.5\n//             })\n//         } else {\n//             return ({\n//                 color: '#4D5B9E',\n//                 borderColor: '#4D5B9E',\n//                 opacity: 0.5\n//             })\n//         }\n//     } else {\n//         return {}\n//     }\n// }\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useEffect","useState","nanoid","QuizCard","Question","Answer","data","shuffle","QuizPage","props","quizState","setQuizState","error","setError","isLoading","setIsLoading","allAnswered","setAllAnswered","checkAnswers","setCheckAnswers","numCorrectAnswers","setNumCorrectAnswers","showErrorMsg","setShowErrorMsg","getQuizState","rawDataArray","map","question","id","incorrectAnswers","incorrect_answers","correctAnswer","correct_answer","answers","selectedAnswer","fetchRawData","response","fetch","ok","Error","status","rawData","json","err","message","handleChange","event","value","target","prev","quizElements"],"sources":["/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\nimport Question from './Question';\nimport Answer from './Answer';\n//import Confetti from 'react-confetti';\nimport data from '../data';\nimport shuffle from '../shuffle';\n\nexport default function QuizPage(props) {\n    const [quizState, setQuizState] = useState([]);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [allAnswered, setAllAnswered] = useState(false);\n    const [checkAnswers, setCheckAnswers] = useState(false);\n    const [numCorrectAnswers, setNumCorrectAnswers] = useState(null);\n    const [showErrorMsg, setShowErrorMsg] = useState(false);\n\n    /*Time to think about state. This is what will change based on user input:\n        1. The selected answer of each question\n        2. The button will only be active once all questions are answered.\n        3. The number of correct answers once submitted.\n    */\n\n    function getQuizState(rawDataArray) {\n        return (rawDataArray.map(question => {\n            return ({\n                id: question.question,\n                question: question.question,\n                incorrectAnswers: question.incorrect_answers,\n                correctAnswer: question.correct_answer,\n                answers: shuffle([...question.incorrect_answers, question.correct_answer]),\n                selectedAnswer: \"\"\n            })\n        }))\n    }    \n    \n    async function fetchRawData() {\n        try {\n            const response = await fetch(\n                \"https://opentdb.com/api.php?amount=5&type=multiple\"\n              );\n              if (!response.ok) {\n                throw new Error(\n                  `This is an HTTP error: The status is ${response.status}`\n                );\n              }\n              let rawData = await response.json();\n              setQuizState(getQuizState(rawData));\n              setError(null);\n            } catch(err) {\n                setError(err.message);\n                setQuizState(null);\n            } finally {\n                setIsLoading(false);\n            }  \n    };\n\n    useEffect(() => fetchRawData(), []);\n\n    // useEffect(() => {\n    //     const answersArray = quizState.filter(question => !question.selectedAnswer )\n    //     if (answersArray.length === 0) {\n    //         setAllAnswered(true);\n    //     } \n    // }, [quizState]);\n    \n    function handleChange(event, id) {\n        const { value } = event.target;\n        setQuizState(prev => {\n            return (prev.map(question => {\n                return question.id === id ? {...question, selectedAnswer: value} : question\n            }))\n        })\n    };\n  \n    // function handleSubmit(event) {\n    //     event.preventDefault();\n    //     if (allAnswered) {\n    //         const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer)\n    //         setNumCorrectAnswers(scoreAnswersArray.length);\n    //         setCheckAnswers(true);\n    //         if (numCorrectAnswers === 5) {\n    //             props.setPerfectScore(true);\n    //         }\n    //     } else {\n    //         return false;\n    //     }\n        \n    // )\n\n    \n    const quizElements = quizState.map(question => (\n        <QuizCard key={nanoid()}>\n            <Question question={question.question}/>\n            <Answer answer={question.answers[0]} \n                    id={question.id} \n                    selectedAnswer={question.selectedAnswer}\n                    handleChange={handleChange}/>\n            <Answer answer={question.answers[1]} \n                    id={question.id} \n                    selectedAnswer={question.selectedAnswer}\n                    handleChange={handleChange}/>\n            <Answer answer={question.answers[2]} \n                    id={question.id} \n                    selectedAnswer={question.selectedAnswer}\n                    handleChange={handleChange}/>\n            <Answer answer={question.answers[3]} \n                    id={question.id} \n                    selectedAnswer={question.selectedAnswer}\n                    handleChange={handleChange}/>\n        </QuizCard>\n    ));\n\n    return (\n        <>\n        <main className= \"quiz-page\">\n            {!isLoading &&<form>\n                {quizElements}\n                <div className='btn-container'>\n                    <button className={allAnswered ? 'button-check' : 'button-check button-check-disabled'}\n                            onMouseEnter={() => setShowErrorMsg(true)}\n                            onMouseLeave={() => setShowErrorMsg(false)}>\n                        {checkAnswers ? 'Play Again' : 'Check answers'}\n                    </button> \n                    {showErrorMsg && !allAnswered && <h3 id='error-message' className='message'>Please answer all questions</h3>}\n                    {checkAnswers && <h3 className='message'>You scored {numCorrectAnswers}/5 correct answers</h3>}\n                </div>\n            </form>}\n        </main>\n        </>\n    )\n}\n\n{/* <main className= \"quiz-page\">\n<form onSubmit={checkAnswers ? (event)=>props.newGame(event) : handleSubmit}>\n    {quizElements}\n    <div className='btn-container'>\n        <button className={allAnswered ? 'button-check' : 'button-check button-check-disabled'}\n                onMouseEnter={() => setShowError(true)}\n                onMouseLeave={() => setShowError(false)}>\n            {checkAnswers ? 'Play Again' : 'Check answers'}\n        </button> \n        {showError && !allAnswered && <h3 id='error-message' className='message'>Please answer all questions</h3>}\n        {checkAnswers && <h3 className='message'>You scored {numCorrectAnswers}/5 correct answers</h3>}\n    </div>\n</form>\n</main> */}\n\n// //Get current question and save in variable for readability\n// function getCurrentQuestion() {\n//     const questionIndex = props.quizState.findIndex(question => question.id === props.id);\n//     return props.quizState[questionIndex];\n// }\n// const currentQuestion = getCurrentQuestion();\n\n\n// //Apply conditional styling after scoring answers\n// function getAnswerClass(index) {\n//     if (props.checkAnswers) {\n//         if (currentQuestion.answers[index] === currentQuestion.correctAnswer) {\n//             return ({\n//                 backgroundColor: '#94D7A2',\n//                 borderColor: '#94D7A2'\n//             })\n//         } else if (currentQuestion.selectedAnswer === currentQuestion.answers[index]) {\n//             return ({\n//                 backgroundColor: '#F8BCBC',\n//                 borderColor: '#F8BCBC',\n//                 opacity: 0.5\n//             })\n//         } else {\n//             return ({\n//                 color: '#4D5B9E',\n//                 borderColor: '#4D5B9E',\n//                 opacity: 0.5\n//             })\n//         }\n//     } else {\n//         return {}\n//     }\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}