{"ast":null,"code":"var _jsxFileName = \"/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuizPage(props) {\n  _s();\n  const [quizState, setQuizState] = useState(getQuizState());\n  const [answers, setAnswers] = useState([]);\n  const [allAnswered, setAllAnswered] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [checkAnswers, setCheckAnswers] = useState(false);\n  //will add check for perfect score to render confetti \n  const [perfectScore, setPerfectScore] = useState(false);\n  function getQuizState() {\n    return props.quizData.map(question => {\n      return {\n        id: question.question,\n        correctAnswer: question.correct_answer,\n        selectedAnswer: null\n      };\n    });\n  }\n  useEffect(() => {\n    const answersArray = quizState.filter(question => !question.selectedAnswer);\n    if (answersArray.length === 0) {\n      setAllAnswered(true);\n    }\n  }, [quizState]);\n  function handleChange(event, id) {\n    const {\n      value\n    } = event.target;\n    setQuizState(prev => {\n      return prev.map(question => {\n        return question.id === id ? {\n          ...question,\n          selectedAnswer: value\n        } : question;\n      });\n    });\n  }\n  console.log(quizState);\n  let numCorrectAnswers;\n  function handleSubmit(event) {\n    event.preventDefault();\n    const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer);\n    numCorrectAnswers = scoreAnswersArray.length;\n    setCheckAnswers(true);\n    if (numCorrectAnswers === 5) {\n      setPerfectScore(true);\n    }\n  }\n  console.log(checkAnswers, perfectScore, numCorrectAnswers);\n  const quizElements = props.quizData.map(question => /*#__PURE__*/_jsxDEV(QuizCard, {\n    id: question.question,\n    question: question.question,\n    correctAnswer: question.correct_answer,\n    incorrectAnswers: question.incorrect_answers,\n    answers: answers,\n    setAnswers: setAnswers,\n    quizState: quizState,\n    handleChange: handleChange\n  }, nanoid(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this));\n  //console.log(showError)\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: props.started ? \"quiz-page fade-in\" : \"quiz-page\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [quizElements, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-container\",\n        children: [showError && /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"error-message\",\n          children: \"Please answer all questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 35\n        }, this), checkAnswers && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"You scored \", numCorrectAnswers, \"/5 correct answers\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 38\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: allAnswered ? 'button-check' : 'button-check button-check-disabled',\n          onMouseEnter: () => setShowError(true),\n          onMouseLeave: () => setShowError(false),\n          children: \"Check answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n//will need to do conditional rendering for button types\n_s(QuizPage, \"4Ud1pRpwt1ylyKx+gVSWHXQBS/Q=\");\n_c = QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useEffect","useState","nanoid","QuizCard","QuizPage","props","quizState","setQuizState","getQuizState","answers","setAnswers","allAnswered","setAllAnswered","showError","setShowError","checkAnswers","setCheckAnswers","perfectScore","setPerfectScore","quizData","map","question","id","correctAnswer","correct_answer","selectedAnswer","answersArray","filter","length","handleChange","event","value","target","prev","console","log","numCorrectAnswers","handleSubmit","preventDefault","scoreAnswersArray","quizElements","incorrect_answers","started"],"sources":["/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\n\n\nexport default function QuizPage(props) {\n    const [quizState, setQuizState] = useState(getQuizState());\n    const [answers, setAnswers] = useState([]);\n    const [allAnswered, setAllAnswered] = useState(false);\n    const [showError, setShowError] = useState(false);\n    const [checkAnswers, setCheckAnswers] = useState(false);\n    //will add check for perfect score to render confetti \n    const [perfectScore, setPerfectScore] = useState(false);\n\n    \n    \n    function getQuizState() {\n        return (props.quizData.map(question => {\n            return ({\n                id: question.question,\n                correctAnswer: question.correct_answer,\n                selectedAnswer: null\n            })\n        }))\n    }    \n\n    useEffect(() => {\n        const answersArray = quizState.filter(question => !question.selectedAnswer )\n        if (answersArray.length === 0) {\n            setAllAnswered(true);\n        } \n    }, [quizState])\n    \n\n    function handleChange(event, id) {\n        const { value } = event.target;\n        setQuizState(prev => {\n            return (prev.map(question => {\n                return question.id === id ? {...question, selectedAnswer: value} : question\n            }))\n        })\n    }\n    console.log(quizState)\n\n    let numCorrectAnswers;\n    function handleSubmit(event) {\n        event.preventDefault();\n        const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer)\n        numCorrectAnswers = scoreAnswersArray.length;\n        setCheckAnswers(true);\n        if (numCorrectAnswers === 5) {\n            setPerfectScore(true);\n        }\n    }\n    console.log(checkAnswers, perfectScore, numCorrectAnswers)\n    const quizElements = props.quizData.map(question => (\n        <QuizCard \n            key={nanoid()}\n            id={question.question}\n            question={question.question}\n            correctAnswer={question.correct_answer}\n            incorrectAnswers={question.incorrect_answers}\n            answers={answers}\n            setAnswers={setAnswers}\n            quizState={quizState}\n            handleChange={handleChange}\n            \n        />\n    ))\n//console.log(showError)\n    return (\n        <main className={props.started ? \"quiz-page fade-in\" : \"quiz-page\"}>\n            <form onSubmit={handleSubmit}>\n                {quizElements}\n                <div className='btn-container'>\n                    {showError && <h3 id='error-message'>Please answer all questions</h3>}\n                    {checkAnswers && <h3>You scored {numCorrectAnswers}/5 correct answers</h3>}\n                    <button className={allAnswered ? 'button-check' : 'button-check button-check-disabled'}\n                            onMouseEnter={() => setShowError(true)}\n                            onMouseLeave={() => setShowError(false)}>\n                        Check answers\n                    </button> \n                </div>\n            </form>\n        </main>\n    )\n}\n//will need to do conditional rendering for button types"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}