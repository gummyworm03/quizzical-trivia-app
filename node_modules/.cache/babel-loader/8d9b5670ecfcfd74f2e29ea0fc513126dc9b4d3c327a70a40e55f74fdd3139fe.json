{"ast":null,"code":"var _jsxFileName = \"/Users/Briana/repos/quizzical-trivia-app/src/components/Answer.js\";\nimport decodeHtml from '../decodeHtml';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Answer(_ref) {\n  let {\n    answer,\n    id,\n    selectedAnswer,\n    handleChange\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"radio\",\n      id: `answer-${answer}`,\n      name: `answer-${id}`,\n      value: answer,\n      checked: selectedAnswer === answer,\n      onChange: event => handleChange(event, id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: `answer-${answer}`,\n      children: decodeHtml(answer)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c = Answer;\n{/*             <input \n                    type=\"radio\"\n                    id={`answer-${currentQuestion.answers[0]}`}\n                    name={`answer-${props.id}`}\n                    value={currentQuestion.answers[0]}\n                    checked={currentQuestion.selectedAnswer === currentQuestion.answers[0]}\n                    onChange={(event)=>props.handleChange(event,props.id)}\n                />\n                <label htmlFor={`answer-${currentQuestion.answers[0]}`}\n                        style={getAnswerClass(0)}>\n                    {decodeHtml(currentQuestion.answers[0])}\n                </label> */}\nvar _c;\n$RefreshReg$(_c, \"Answer\");","map":{"version":3,"names":["decodeHtml","Answer","answer","id","selectedAnswer","handleChange","event"],"sources":["/Users/Briana/repos/quizzical-trivia-app/src/components/Answer.js"],"sourcesContent":["import decodeHtml from '../decodeHtml';\n\nexport default function Answer({ answer, id, selectedAnswer, handleChange }) {\n    return (\n        <>\n           <input \n                type=\"radio\"\n                id={`answer-${answer}`}\n                name={`answer-${id}`}\n                value={answer}\n                checked={selectedAnswer === answer}\n                onChange={(event)=>handleChange(event,id)}\n                />\n            <label htmlFor={`answer-${answer}`}>\n                {decodeHtml(answer)}\n            </label>\n        </>\n    )\n}\n\n{/*             <input \n                    type=\"radio\"\n                    id={`answer-${currentQuestion.answers[0]}`}\n                    name={`answer-${props.id}`}\n                    value={currentQuestion.answers[0]}\n                    checked={currentQuestion.selectedAnswer === currentQuestion.answers[0]}\n                    onChange={(event)=>props.handleChange(event,props.id)}\n                />\n                <label htmlFor={`answer-${currentQuestion.answers[0]}`}\n                        style={getAnswerClass(0)}>\n                    {decodeHtml(currentQuestion.answers[0])}\n                </label> */}"],"mappings":";AAAA,OAAOA,UAAU,MAAM,eAAe;AAAC;AAAA;AAEvC,eAAe,SAASC,MAAM,OAA+C;EAAA,IAA9C;IAAEC,MAAM;IAAEC,EAAE;IAAEC,cAAc;IAAEC;EAAa,CAAC;EACvE,oBACI;IAAA,wBACG;MACK,IAAI,EAAC,OAAO;MACZ,EAAE,EAAG,UAASH,MAAO,EAAE;MACvB,IAAI,EAAG,UAASC,EAAG,EAAE;MACrB,KAAK,EAAED,MAAO;MACd,OAAO,EAAEE,cAAc,KAAKF,MAAO;MACnC,QAAQ,EAAGI,KAAK,IAAGD,YAAY,CAACC,KAAK,EAACH,EAAE;IAAE;MAAA;MAAA;MAAA;IAAA,QACxC,eACN;MAAO,OAAO,EAAG,UAASD,MAAO,EAAE;MAAA,UAC9BF,UAAU,CAACE,MAAM;IAAC;MAAA;MAAA;MAAA;IAAA,QACf;EAAA,gBACT;AAEX;AAAC,KAhBuBD,MAAM;AAkB9B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAXC;AAW2B;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}