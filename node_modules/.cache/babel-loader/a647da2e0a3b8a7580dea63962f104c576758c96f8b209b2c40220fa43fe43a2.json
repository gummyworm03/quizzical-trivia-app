{"ast":null,"code":"var _jsxFileName = \"/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuizPage(props) {\n  _s();\n  // const [quizState, setQuizState] = useState(getQuizState());\n  // const [allAnswered, setAllAnswered] = useState(false);\n  const [showError, setShowError] = useState(false);\n  // const [checkAnswers, setCheckAnswers] = useState(false);\n  // const [numCorrectAnswers, setNumCorrectAnswers] = useState(null);\n  //will add check for perfect score to render confetti \n  //const [perfectScore, setPerfectScore] = useState(false);\n\n  //when setting newgame:\n  // quizstate needs to reset\n  // allAnswered > false\n  //checkAnswers > false\n  //numCorrectAnswers > null\n  //!perfectScore ? do nothing : setPerfectScore(true)\n\n  // //helper function to shuffle answers\n  // function shuffle(array) {\n  //     for (let i = array.length - 1; i > 0; i--) {\n  //       let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n  //       [array[i], array[j]] = [array[j], array[i]];\n  //     }\n  //     return array;\n  // }\n\n  // function getQuizState() {\n  //     return (props.quizData.map(question => {\n  //         return ({\n  //             id: question.question,\n  //             incorrectAnswers: question.incorrect_answers,\n  //             correctAnswer: question.correct_answer,\n  //             answers: \"\",\n  //             selectedAnswer: null\n  //         })\n  //     }))\n  // }    \n  // //shuffle answers only once\n  // useEffect(() => {\n  //     setQuizState(() => {\n  //         return (props.quizData.map(question => {\n  //             return ({\n  //                 id: question.question,\n  //                 incorrectAnswers: question.incorrect_answers,\n  //                 correctAnswer: question.correct_answer,\n  //                 answers: shuffle([...question.incorrect_answers, question.correct_answer]),\n  //                 selectedAnswer: null\n  //             })\n  //         }))\n  //     })\n  // }, []);\n\n  // useEffect(() => {\n  //     const answersArray = quizState.filter(question => !question.selectedAnswer )\n  //     if (answersArray.length === 0) {\n  //         setAllAnswered(true);\n  //     } \n  // }, [quizState]);\n\n  // function handleChange(event, id) {\n  //     const { value } = event.target;\n  //     setQuizState(prev => {\n  //         return (prev.map(question => {\n  //             return question.id === id ? {...question, selectedAnswer: value} : question\n  //         }))\n  //     })\n  // }\n  // //console.log(quizState)\n\n  // function handleSubmit(event) {\n  //     event.preventDefault();\n  //     if (allAnswered) {\n  //         const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer)\n  //         setNumCorrectAnswers(scoreAnswersArray.length);\n  //         setCheckAnswers(true);\n  //         if (numCorrectAnswers === 5) {\n  //             setPerfectScore(true);\n  //         }\n  //     } else {\n  //         return false;\n  //     }\n\n  // }\n\n  //console.log(checkAnswers, perfectScore, numCorrectAnswers)\n  const quizElements = props.quizData.map(question => /*#__PURE__*/_jsxDEV(QuizCard, {\n    id: question.question,\n    question: question.question,\n    quizState: props.quizState,\n    checkAnswers: props.checkAnswers,\n    handleChange: props.handleChange\n  }, nanoid(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: props.started ? \"quiz-page fade-in\" : \"quiz-page\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: props.checkAnswers ? event => props.newGame(event) : props.handleSubmit,\n      children: [quizElements, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: props.allAnswered ? 'button-check' : 'button-check button-check-disabled',\n          onMouseEnter: () => setShowError(true),\n          onMouseLeave: () => setShowError(false),\n          children: props.checkAnswers ? 'Play Again' : 'Check answers'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), showError && !props.allAnswered && /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"error-message\",\n          className: \"message\",\n          children: \"Please answer all questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 57\n        }, this), props.checkAnswers && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"message\",\n          children: [\"You scored \", props.numCorrectAnswers, \"/5 correct answers\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n//will need to do conditional rendering for button types\n_s(QuizPage, \"C77dtg4pzT9nAKspAjk8aYcXoEQ=\");\n_c = QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useEffect","useState","nanoid","QuizCard","QuizPage","props","showError","setShowError","quizElements","quizData","map","question","quizState","checkAnswers","handleChange","started","event","newGame","handleSubmit","allAnswered","numCorrectAnswers"],"sources":["/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\n\n\nexport default function QuizPage(props) {\n    // const [quizState, setQuizState] = useState(getQuizState());\n    // const [allAnswered, setAllAnswered] = useState(false);\n    const [showError, setShowError] = useState(false);\n    // const [checkAnswers, setCheckAnswers] = useState(false);\n    // const [numCorrectAnswers, setNumCorrectAnswers] = useState(null);\n    //will add check for perfect score to render confetti \n    //const [perfectScore, setPerfectScore] = useState(false);\n    \n    //when setting newgame:\n    // quizstate needs to reset\n    // allAnswered > false\n    //checkAnswers > false\n    //numCorrectAnswers > null\n    //!perfectScore ? do nothing : setPerfectScore(true)\n\n\n    // //helper function to shuffle answers\n    // function shuffle(array) {\n    //     for (let i = array.length - 1; i > 0; i--) {\n    //       let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n    //       [array[i], array[j]] = [array[j], array[i]];\n    //     }\n    //     return array;\n    // }\n    \n    // function getQuizState() {\n    //     return (props.quizData.map(question => {\n    //         return ({\n    //             id: question.question,\n    //             incorrectAnswers: question.incorrect_answers,\n    //             correctAnswer: question.correct_answer,\n    //             answers: \"\",\n    //             selectedAnswer: null\n    //         })\n    //     }))\n    // }    \n    // //shuffle answers only once\n    // useEffect(() => {\n    //     setQuizState(() => {\n    //         return (props.quizData.map(question => {\n    //             return ({\n    //                 id: question.question,\n    //                 incorrectAnswers: question.incorrect_answers,\n    //                 correctAnswer: question.correct_answer,\n    //                 answers: shuffle([...question.incorrect_answers, question.correct_answer]),\n    //                 selectedAnswer: null\n    //             })\n    //         }))\n    //     })\n    // }, []);\n\n    // useEffect(() => {\n    //     const answersArray = quizState.filter(question => !question.selectedAnswer )\n    //     if (answersArray.length === 0) {\n    //         setAllAnswered(true);\n    //     } \n    // }, [quizState]);\n    \n    // function handleChange(event, id) {\n    //     const { value } = event.target;\n    //     setQuizState(prev => {\n    //         return (prev.map(question => {\n    //             return question.id === id ? {...question, selectedAnswer: value} : question\n    //         }))\n    //     })\n    // }\n    // //console.log(quizState)\n\n    // function handleSubmit(event) {\n    //     event.preventDefault();\n    //     if (allAnswered) {\n    //         const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer)\n    //         setNumCorrectAnswers(scoreAnswersArray.length);\n    //         setCheckAnswers(true);\n    //         if (numCorrectAnswers === 5) {\n    //             setPerfectScore(true);\n    //         }\n    //     } else {\n    //         return false;\n    //     }\n        \n    // }\n\n   \n\n    //console.log(checkAnswers, perfectScore, numCorrectAnswers)\n    const quizElements = props.quizData.map(question => (\n        <QuizCard \n            key={nanoid()}\n            id={question.question}\n            question={question.question}\n            quizState={props.quizState}\n            checkAnswers={props.checkAnswers}\n            handleChange={props.handleChange}\n            \n        />\n    ))\n\n    return (\n        <main className={props.started ? \"quiz-page fade-in\" : \"quiz-page\"}>\n            <form onSubmit={props.checkAnswers ? (event)=>props.newGame(event) : props.handleSubmit}>\n                {quizElements}\n                <div className='btn-container'>\n                    <button className={props.allAnswered ? 'button-check' : 'button-check button-check-disabled'}\n                            onMouseEnter={() => setShowError(true)}\n                            onMouseLeave={() => setShowError(false)}>\n                        {props.checkAnswers ? 'Play Again' : 'Check answers'}\n                    </button> \n                    {showError && !props.allAnswered && <h3 id='error-message' className='message'>Please answer all questions</h3>}\n                    {props.checkAnswers && <h3 className='message'>You scored {props.numCorrectAnswers}/5 correct answers</h3>}\n                </div>\n            </form>\n        </main>\n    )\n}\n//will need to do conditional rendering for button types"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,eAAe;AACtB,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,QAAQ,MAAM,YAAY;AAAC;AAGlC,eAAe,SAASC,QAAQ,CAACC,KAAK,EAAE;EAAA;EACpC;EACA;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAIA;EACA,MAAMO,YAAY,GAAGH,KAAK,CAACI,QAAQ,CAACC,GAAG,CAACC,QAAQ,iBAC5C,QAAC,QAAQ;IAEL,EAAE,EAAEA,QAAQ,CAACA,QAAS;IACtB,QAAQ,EAAEA,QAAQ,CAACA,QAAS;IAC5B,SAAS,EAAEN,KAAK,CAACO,SAAU;IAC3B,YAAY,EAAEP,KAAK,CAACQ,YAAa;IACjC,YAAY,EAAER,KAAK,CAACS;EAAa,GAL5BZ,MAAM,EAAE;IAAA;IAAA;IAAA;EAAA,QAQpB,CAAC;EAEF,oBACI;IAAM,SAAS,EAAEG,KAAK,CAACU,OAAO,GAAG,mBAAmB,GAAG,WAAY;IAAA,uBAC/D;MAAM,QAAQ,EAAEV,KAAK,CAACQ,YAAY,GAAIG,KAAK,IAAGX,KAAK,CAACY,OAAO,CAACD,KAAK,CAAC,GAAGX,KAAK,CAACa,YAAa;MAAA,WACnFV,YAAY,eACb;QAAK,SAAS,EAAC,eAAe;QAAA,wBAC1B;UAAQ,SAAS,EAAEH,KAAK,CAACc,WAAW,GAAG,cAAc,GAAG,oCAAqC;UACrF,YAAY,EAAE,MAAMZ,YAAY,CAAC,IAAI,CAAE;UACvC,YAAY,EAAE,MAAMA,YAAY,CAAC,KAAK,CAAE;UAAA,UAC3CF,KAAK,CAACQ,YAAY,GAAG,YAAY,GAAG;QAAe;UAAA;UAAA;UAAA;QAAA,QAC/C,EACRP,SAAS,IAAI,CAACD,KAAK,CAACc,WAAW,iBAAI;UAAI,EAAE,EAAC,eAAe;UAAC,SAAS,EAAC,SAAS;UAAA,UAAC;QAA2B;UAAA;UAAA;UAAA;QAAA,QAAK,EAC9Gd,KAAK,CAACQ,YAAY,iBAAI;UAAI,SAAS,EAAC,SAAS;UAAA,WAAC,aAAW,EAACR,KAAK,CAACe,iBAAiB,EAAC,oBAAkB;QAAA;UAAA;UAAA;UAAA;QAAA,QAAK;MAAA;QAAA;QAAA;QAAA;MAAA,QACxG;IAAA;MAAA;MAAA;MAAA;IAAA;EACH;IAAA;IAAA;IAAA;EAAA,QACJ;AAEf;AACA;AAAA,GApHwBhB,QAAQ;AAAA,KAARA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}