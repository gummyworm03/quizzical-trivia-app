{"ast":null,"code":"var _jsxFileName = \"/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuizPage(props) {\n  _s();\n  const [quizState, setQuizState] = useState(getQuizState());\n  //const [allAnswers, setAllAnswers] = useState({});\n  const [allAnswered, setAllAnswered] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [checkAnswers, setCheckAnswers] = useState(false);\n  //will add check for perfect score to render confetti \n  const [perfectScore, setPerfectScore] = useState(false);\n  const shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n  function getQuizState() {\n    return props.quizData.map(question => {\n      return {\n        id: question.question,\n        correctAnswer: question.correct_answer,\n        answers: \"\",\n        selectedAnswer: null\n      };\n    });\n  }\n\n  // function getAllAnswers() {\n  //     return (props.quizData.map(question => {\n  //         return ({\n  //             id: question.question,\n  //             answers: [...question.incorrectAnswers, question.correctAnswer]\n  //         })\n  //     }))\n  // }\n  useEffect(() => {\n    setQuizState(prev => {\n      return prev.map(question => {\n        const answersArray = [...question.incorrect_answers, question.correctAnswer];\n        return {\n          ...prev,\n          answers: shuffle(answersArray)\n        };\n      });\n    });\n  }, []);\n  useEffect(() => {\n    const answersArray = quizState.filter(question => !question.selectedAnswer);\n    if (answersArray.length === 0) {\n      setAllAnswered(true);\n    }\n  }, [quizState]);\n  function handleChange(event, id) {\n    const {\n      value\n    } = event.target;\n    setQuizState(prev => {\n      return prev.map(question => {\n        return question.id === id ? {\n          ...question,\n          selectedAnswer: value\n        } : question;\n      });\n    });\n  }\n  console.log(quizState);\n  let numCorrectAnswers;\n  function handleSubmit(event) {\n    event.preventDefault();\n    const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer);\n    numCorrectAnswers = scoreAnswersArray.length;\n    setCheckAnswers(true);\n    if (numCorrectAnswers === 5) {\n      setPerfectScore(true);\n    }\n  }\n  console.log(checkAnswers, perfectScore, numCorrectAnswers);\n  const quizElements = props.quizData.map(question => /*#__PURE__*/_jsxDEV(QuizCard, {\n    id: question.question,\n    question: question.question,\n    correctAnswer: question.correct_answer,\n    incorrectAnswers: question.incorrect_answers,\n    quizState: quizState,\n    handleChange: handleChange\n  }, nanoid(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this));\n  //console.log(showError)\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: props.started ? \"quiz-page fade-in\" : \"quiz-page\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [quizElements, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-container\",\n        children: [showError && /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"error-message\",\n          children: \"Please answer all questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 35\n        }, this), checkAnswers && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"You scored \", numCorrectAnswers, \"/5 correct answers\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 38\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: allAnswered ? 'button-check' : 'button-check button-check-disabled',\n          onMouseEnter: () => setShowError(true),\n          onMouseLeave: () => setShowError(false),\n          children: \"Check answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n//will need to do conditional rendering for button types\n_s(QuizPage, \"oWvzXSZyhMMeXdX7TWkq48woOpM=\");\n_c = QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useEffect","useState","nanoid","QuizCard","QuizPage","props","quizState","setQuizState","getQuizState","allAnswered","setAllAnswered","showError","setShowError","checkAnswers","setCheckAnswers","perfectScore","setPerfectScore","shuffle","array","i","length","j","Math","floor","random","quizData","map","question","id","correctAnswer","correct_answer","answers","selectedAnswer","prev","answersArray","incorrect_answers","filter","handleChange","event","value","target","console","log","numCorrectAnswers","handleSubmit","preventDefault","scoreAnswersArray","quizElements","started"],"sources":["/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\n\n\nexport default function QuizPage(props) {\n    const [quizState, setQuizState] = useState(getQuizState());\n    //const [allAnswers, setAllAnswers] = useState({});\n    const [allAnswered, setAllAnswered] = useState(false);\n    const [showError, setShowError] = useState(false);\n    const [checkAnswers, setCheckAnswers] = useState(false);\n    //will add check for perfect score to render confetti \n    const [perfectScore, setPerfectScore] = useState(false);\n    \n    const shuffle = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n          [array[i], array[j]] = [array[j], array[i]];\n        }\n      }\n    \n    function getQuizState() {\n        return (props.quizData.map(question => {\n            return ({\n                id: question.question,\n                correctAnswer: question.correct_answer,\n                answers: \"\",\n                selectedAnswer: null\n            })\n        }))\n    }    \n\n    // function getAllAnswers() {\n    //     return (props.quizData.map(question => {\n    //         return ({\n    //             id: question.question,\n    //             answers: [...question.incorrectAnswers, question.correctAnswer]\n    //         })\n    //     }))\n    // }\n    useEffect(() => {\n        setQuizState(prev => {\n            return prev.map(question => {\n                const answersArray = [...question.incorrect_answers, question.correctAnswer]\n                return ({\n                    ...prev,\n                    answers: shuffle(answersArray)\n                })\n            })\n        })\n    }, []);\n\n    useEffect(() => {\n        const answersArray = quizState.filter(question => !question.selectedAnswer )\n        if (answersArray.length === 0) {\n            setAllAnswered(true);\n        } \n    }, [quizState]);\n    \n\n    function handleChange(event, id) {\n        const { value } = event.target;\n        setQuizState(prev => {\n            return (prev.map(question => {\n                return question.id === id ? {...question, selectedAnswer: value} : question\n            }))\n        })\n    }\n    console.log(quizState)\n\n    let numCorrectAnswers;\n    function handleSubmit(event) {\n        event.preventDefault();\n        const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer)\n        numCorrectAnswers = scoreAnswersArray.length;\n        setCheckAnswers(true);\n        if (numCorrectAnswers === 5) {\n            setPerfectScore(true);\n        }\n    }\n    console.log(checkAnswers, perfectScore, numCorrectAnswers)\n    const quizElements = props.quizData.map(question => (\n        <QuizCard \n            key={nanoid()}\n            id={question.question}\n            question={question.question}\n            correctAnswer={question.correct_answer}\n            incorrectAnswers={question.incorrect_answers}\n            quizState={quizState}\n            handleChange={handleChange}\n            \n        />\n    ))\n//console.log(showError)\n    return (\n        <main className={props.started ? \"quiz-page fade-in\" : \"quiz-page\"}>\n            <form onSubmit={handleSubmit}>\n                {quizElements}\n                <div className='btn-container'>\n                    {showError && <h3 id='error-message'>Please answer all questions</h3>}\n                    {checkAnswers && <h3>You scored {numCorrectAnswers}/5 correct answers</h3>}\n                    <button className={allAnswered ? 'button-check' : 'button-check button-check-disabled'}\n                            onMouseEnter={() => setShowError(true)}\n                            onMouseLeave={() => setShowError(false)}>\n                        Check answers\n                    </button> \n                </div>\n            </form>\n        </main>\n    )\n}\n//will need to do conditional rendering for button types"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}