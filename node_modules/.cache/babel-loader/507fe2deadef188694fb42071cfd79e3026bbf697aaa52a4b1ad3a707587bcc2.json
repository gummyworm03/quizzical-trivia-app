{"ast":null,"code":"var _jsxFileName = \"/Users/Briana/repos/quizzical-trivia-app/src/components/QuizCard.js\";\nimport React, { useState, useEffect } from 'react';\nimport '../styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuizCard(props) {\n  // const shuffle = (array) => {\n  //     for (let i = array.length - 1; i > 0; i--) {\n  //       let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n  //       [array[i], array[j]] = [array[j], array[i]];\n  //     }\n  //   }\n\n  function decodeHtml(html) {\n    let txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n  }\n\n  //Get current question and save in variable for readability\n  function getCurrentQuestion() {\n    const questionIndex = props.quizState.findIndex(question => question.id === props.id);\n    return props.quizState[questionIndex];\n  }\n  const currentQuestion = getCurrentQuestion();\n  //console.log(questionIndex);\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"quiz-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: decodeHtml(props.question)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        id: `answer-${currentQuestion.answers[0]}`,\n        name: `answer-${props.id}`,\n        value: currentQuestion.answers[0],\n        checked: currentQuestion.selectedAnswer === currentQuestion.answers[0],\n        onChange: event => props.handleChange(event, props.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `answer-${currentQuestion.answers[0]}`,\n        children: decodeHtml(currentQuestion.answers[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        id: `answer-${currentQuestion.answers[1]}`,\n        name: `answer-${props.id}`,\n        value: currentQuestion.answers[1],\n        checked: currentQuestion.selectedAnswer === currentQuestion.answers[1],\n        onChange: event => props.handleChange(event, props.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `answer-${currentQuestion.answers[1]}`,\n        children: decodeHtml(currentQuestion.answers[1])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        id: `answer-${currentQuestion.answers[2]}`,\n        name: `answer-${props.id}`,\n        value: currentQuestion.answers[2],\n        checked: currentQuestion.selectedAnswer === currentQuestion.answers[2],\n        onChange: event => props.handleChange(event, props.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `answer-${currentQuestion.answers[2]}`,\n        children: decodeHtml(currentQuestion.answers[2])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        id: `answer-${currentQuestion.answers[3]}`,\n        name: `answer-${props.id}`,\n        value: currentQuestion.answers[3],\n        checked: currentQuestion.selectedAnswer === currentQuestion.answers[3],\n        onChange: event => props.handleChange(event, props.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `answer-${currentQuestion.answers[3]}`,\n        children: decodeHtml(currentQuestion.answers[3])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n// return (\n//     <main className='quiz-card'>\n//         <fieldset>\n//             <legend>{decodeHtml(props.question)}</legend>\n\n//             <input \n//                 type=\"radio\"\n//                 id={`answer-${props.answers[0]}`}\n//                 name={`answer-${props.id}`}\n//                 value={props.answers[0]}\n//                 checked={currentQuestion.selectedAnswer === props.answers[0]}\n//                 onChange={(event)=>props.handleChange(event,props.id)}\n//             />\n//             <label htmlFor={`answer-${props.answers[0]}`}>{decodeHtml(props.answers[0])}</label>\n\n//             <input \n//                 type=\"radio\"\n//                 id={`answer-${props.answers[1]}`}\n//                 name={`answer-${props.id}`}\n//                 value={props.answers[1]}\n//                 checked={props.quizState[questionIndex].selectedAnswer === props.answers[1]}\n//                 onChange={(event)=>props.handleChange(event,props.id)}\n\n//             />\n//             <label htmlFor={`answer-${props.answers[1]}`}>{decodeHtml(props.answers[1])}</label>\n\n//             <input \n//                 type=\"radio\"\n//                 id={`answer-${props.answers[2]}`}\n//                 name={`answer-${props.id}`}\n//                 value={props.answers[2]}\n//                 checked={props.quizState[questionIndex].selectedAnswer === props.answers[2]}\n//                 onChange={(event)=>props.handleChange(event,props.id)}\n//             />\n//             <label htmlFor={`answer-${props.answers[2]}`}>{decodeHtml(props.answers[2])}</label>\n\n//             <input \n//                 type=\"radio\"\n//                 id={`answer-${props.answers[3]}`}\n//                 name={`answer-${props.id}`}\n//                 value={props.answers[3]}\n//                 checked={props.quizState[questionIndex].selectedAnswer === props.answers[3]}\n//                 onChange={(event)=>props.handleChange(event,props.id)}\n//             />\n//             <label htmlFor={`answer-${props.answers[3]}`}>{decodeHtml(props.answers[3])}</label>\n\n//         </fieldset>\n//         <hr />\n//     </main>\n// )\n// }\n_c = QuizCard;\nvar _c;\n$RefreshReg$(_c, \"QuizCard\");","map":{"version":3,"names":["React","useState","useEffect","QuizCard","props","decodeHtml","html","txt","document","createElement","innerHTML","value","getCurrentQuestion","questionIndex","quizState","findIndex","question","id","currentQuestion","answers","selectedAnswer","event","handleChange"],"sources":["/Users/Briana/repos/quizzical-trivia-app/src/components/QuizCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles.css';\n\n\nexport default function QuizCard(props) {\n    \n    // const shuffle = (array) => {\n    //     for (let i = array.length - 1; i > 0; i--) {\n    //       let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n    //       [array[i], array[j]] = [array[j], array[i]];\n    //     }\n    //   }\n    \n    function decodeHtml(html) {\n        let txt = document.createElement('textarea');\n        txt.innerHTML = html;\n        return txt.value;\n    }\n\n    //Get current question and save in variable for readability\n    function getCurrentQuestion() {\n        const questionIndex = props.quizState.findIndex(question => question.id === props.id);\n        return props.quizState[questionIndex];\n    }\n    const currentQuestion = getCurrentQuestion();\n    //console.log(questionIndex);\n\n    return (\n        <main className='quiz-card'>\n            <fieldset>\n                <legend>{decodeHtml(props.question)}</legend>\n                \n                <input \n                    type=\"radio\"\n                    id={`answer-${currentQuestion.answers[0]}`}\n                    name={`answer-${props.id}`}\n                    value={currentQuestion.answers[0]}\n                    checked={currentQuestion.selectedAnswer === currentQuestion.answers[0]}\n                    onChange={(event)=>props.handleChange(event,props.id)}\n                />\n                <label htmlFor={`answer-${currentQuestion.answers[0]}`}>{decodeHtml(currentQuestion.answers[0])}</label>\n                \n                <input \n                    type=\"radio\"\n                    id={`answer-${currentQuestion.answers[1]}`}\n                    name={`answer-${props.id}`}\n                    value={currentQuestion.answers[1]}\n                    checked={currentQuestion.selectedAnswer === currentQuestion.answers[1]}\n                    onChange={(event)=>props.handleChange(event,props.id)}\n                    \n                />\n                <label htmlFor={`answer-${currentQuestion.answers[1]}`}>{decodeHtml(currentQuestion.answers[1])}</label>\n                \n                <input \n                    type=\"radio\"\n                    id={`answer-${currentQuestion.answers[2]}`}\n                    name={`answer-${props.id}`}\n                    value={currentQuestion.answers[2]}\n                    checked={currentQuestion.selectedAnswer === currentQuestion.answers[2]}\n                    onChange={(event)=>props.handleChange(event,props.id)}\n                />\n                <label htmlFor={`answer-${currentQuestion.answers[2]}`}>{decodeHtml(currentQuestion.answers[2])}</label>\n                \n                <input \n                    type=\"radio\"\n                    id={`answer-${currentQuestion.answers[3]}`}\n                    name={`answer-${props.id}`}\n                    value={currentQuestion.answers[3]}\n                    checked={currentQuestion.selectedAnswer === currentQuestion.answers[3]}\n                    onChange={(event)=>props.handleChange(event,props.id)}\n                />\n                <label htmlFor={`answer-${currentQuestion.answers[3]}`}>{decodeHtml(currentQuestion.answers[3])}</label>\n\n            </fieldset>\n            <hr />\n        </main>\n    )\n}\n\n// return (\n//     <main className='quiz-card'>\n//         <fieldset>\n//             <legend>{decodeHtml(props.question)}</legend>\n            \n//             <input \n//                 type=\"radio\"\n//                 id={`answer-${props.answers[0]}`}\n//                 name={`answer-${props.id}`}\n//                 value={props.answers[0]}\n//                 checked={currentQuestion.selectedAnswer === props.answers[0]}\n//                 onChange={(event)=>props.handleChange(event,props.id)}\n//             />\n//             <label htmlFor={`answer-${props.answers[0]}`}>{decodeHtml(props.answers[0])}</label>\n            \n//             <input \n//                 type=\"radio\"\n//                 id={`answer-${props.answers[1]}`}\n//                 name={`answer-${props.id}`}\n//                 value={props.answers[1]}\n//                 checked={props.quizState[questionIndex].selectedAnswer === props.answers[1]}\n//                 onChange={(event)=>props.handleChange(event,props.id)}\n                \n//             />\n//             <label htmlFor={`answer-${props.answers[1]}`}>{decodeHtml(props.answers[1])}</label>\n            \n//             <input \n//                 type=\"radio\"\n//                 id={`answer-${props.answers[2]}`}\n//                 name={`answer-${props.id}`}\n//                 value={props.answers[2]}\n//                 checked={props.quizState[questionIndex].selectedAnswer === props.answers[2]}\n//                 onChange={(event)=>props.handleChange(event,props.id)}\n//             />\n//             <label htmlFor={`answer-${props.answers[2]}`}>{decodeHtml(props.answers[2])}</label>\n            \n//             <input \n//                 type=\"radio\"\n//                 id={`answer-${props.answers[3]}`}\n//                 name={`answer-${props.id}`}\n//                 value={props.answers[3]}\n//                 checked={props.quizState[questionIndex].selectedAnswer === props.answers[3]}\n//                 onChange={(event)=>props.handleChange(event,props.id)}\n//             />\n//             <label htmlFor={`answer-${props.answers[3]}`}>{decodeHtml(props.answers[3])}</label>\n\n//         </fieldset>\n//         <hr />\n//     </main>\n// )\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}