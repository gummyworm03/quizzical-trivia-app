{"ast":null,"code":"var _jsxFileName = \"/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\nimport Question from './Question';\nimport Answer from './Answer';\n//import Confetti from 'react-confetti';\nimport data from '../data';\nimport shuffle from '../shuffle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function QuizPage(props) {\n  _s();\n  //change to placeholder data for now to avoid empty array bug \n  const [quizState, setQuizState] = useState(getQuizState(data.results));\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [allAnswered, setAllAnswered] = useState(false);\n  const [checkAnswers, setCheckAnswers] = useState(false);\n  const [numCorrectAnswers, setNumCorrectAnswers] = useState(null);\n  const [showErrorMsg, setShowErrorMsg] = useState(false);\n  //Consider refactoring and combining state since these are all related\n  // const [answeredState, setAnsweredState] = useState({\n  //     allAnswered: false,\n  //     scoreAnswers: false,\n  //     numCorrectAnswers: null,\n  //     perfectScore: false\n  // });\n  /*Time to think about state. This is what will change based on user input:\n      1. The selected answer of each question\n      2. The button will only be active once all questions are answered.\n      3. The number of correct answers once submitted.\n  */\n  console.log(quizState);\n  useEffect(() => fetchRawData(), []);\n  function getQuizState(rawDataArray) {\n    return rawDataArray.map(question => {\n      return {\n        id: question.question,\n        question: question.question,\n        incorrectAnswers: question.incorrect_answers,\n        correctAnswer: question.correct_answer,\n        answers: shuffle([...question.incorrect_answers, question.correct_answer]),\n        selectedAnswer: \"\"\n      };\n    });\n  }\n  function fetchRawData() {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(response => {\n      if (!response.ok) {\n        throw new Error(`This is an HTTP error: The status is ${response.status}`);\n      }\n      return response.json();\n    }).then(rawData => {\n      setQuizState(getQuizState(rawData.results));\n      setError(null);\n    }).catch(err => {\n      setError(err.message);\n      setQuizState(null);\n    }).finally(() => setIsLoading(false));\n  }\n  ;\n  //bug because initial state is empty array so this stays true\n  useEffect(() => {\n    const answersArray = quizState.filter(question => !question.selectedAnswer);\n    if (answersArray.length === 0) {\n      setAllAnswered(true);\n    }\n  }, [quizState]);\n  console.log(allAnswered);\n  function handleChange(event, id) {\n    const {\n      value\n    } = event.target;\n    setQuizState(prev => {\n      return prev.map(question => {\n        return question.id === id ? {\n          ...question,\n          selectedAnswer: value\n        } : question;\n      });\n    });\n  }\n  ;\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (allAnswered) {\n      const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer);\n      setNumCorrectAnswers(scoreAnswersArray.length);\n      setCheckAnswers(true);\n      // if (scoreAnswersArray.length === 5) {\n      //     props.setPerfectScore(true);\n      // }\n    } else {\n      return false;\n    }\n  }\n  const quizElements = quizState.map(question => /*#__PURE__*/_jsxDEV(QuizCard, {\n    children: [/*#__PURE__*/_jsxDEV(Question, {\n      question: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer, {\n      answer: question.answers[0],\n      id: question.id,\n      selectedAnswer: question.selectedAnswer,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer, {\n      answer: question.answers[1],\n      id: question.id,\n      selectedAnswer: question.selectedAnswer,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer, {\n      answer: question.answers[2],\n      id: question.id,\n      selectedAnswer: question.selectedAnswer,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer, {\n      answer: question.answers[3],\n      id: question.id,\n      selectedAnswer: question.selectedAnswer,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, nanoid(), true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"quiz-page\",\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-page\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 27\n      }, this), !isLoading && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: checkAnswers ? event => props.newGame(event) : handleSubmit,\n        children: [quizElements, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: allAnswered ? 'button-check' : 'button-check button-check-disabled',\n            onMouseEnter: () => setShowErrorMsg(true),\n            onMouseLeave: () => setShowErrorMsg(false),\n            children: checkAnswers ? 'Play Again' : 'Check answers'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this), showErrorMsg && !allAnswered && /*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"error-message\",\n            className: \"message\",\n            children: \"Please answer all questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 54\n          }, this), checkAnswers && /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"message\",\n            children: [\"You scored \", numCorrectAnswers, \"/5 correct answers\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(QuizPage, \"iaGsmmS9p0VPjO7vHMzkaCjGqnM=\");\n_c = QuizPage;\n{/*<form onSubmit={checkAnswers ? (event)=>props.newGame(event) : handleSubmit}>*/}\n\n// //Apply conditional styling after scoring answers\n// function getAnswerClass() {\n//     if (props.checkAnswers) {\n//         if (answer === correctAnswer) {\n//             return ({\n//                 backgroundColor: '#94D7A2',\n//                 borderColor: '#94D7A2'\n//             })\n//         } else if (answer === selectedAnswer) {\n//             return ({\n//                 backgroundColor: '#F8BCBC',\n//                 borderColor: '#F8BCBC',\n//                 opacity: 0.5\n//             })\n//         } else {\n//             return ({\n//                 color: '#4D5B9E',\n//                 borderColor: '#4D5B9E',\n//                 opacity: 0.5\n//             })\n//         }\n//     } else {\n//         return {}\n//     }\n// }\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useEffect","useState","nanoid","QuizCard","Question","Answer","data","shuffle","QuizPage","props","quizState","setQuizState","getQuizState","results","error","setError","isLoading","setIsLoading","allAnswered","setAllAnswered","checkAnswers","setCheckAnswers","numCorrectAnswers","setNumCorrectAnswers","showErrorMsg","setShowErrorMsg","console","log","fetchRawData","rawDataArray","map","question","id","incorrectAnswers","incorrect_answers","correctAnswer","correct_answer","answers","selectedAnswer","fetch","then","response","ok","Error","status","json","rawData","catch","err","message","finally","answersArray","filter","length","handleChange","event","value","target","prev","handleSubmit","preventDefault","scoreAnswersArray","quizElements","newGame"],"sources":["/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\nimport Question from './Question';\nimport Answer from './Answer';\n//import Confetti from 'react-confetti';\nimport data from '../data';\nimport shuffle from '../shuffle';\n\nexport default function QuizPage(props) {\n    //change to placeholder data for now to avoid empty array bug \n    const [quizState, setQuizState] = useState(getQuizState(data.results));\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [allAnswered, setAllAnswered] = useState(false);\n    const [checkAnswers, setCheckAnswers] = useState(false);\n    const [numCorrectAnswers, setNumCorrectAnswers] = useState(null);\n    const [showErrorMsg, setShowErrorMsg] = useState(false);\n    //Consider refactoring and combining state since these are all related\n    // const [answeredState, setAnsweredState] = useState({\n    //     allAnswered: false,\n    //     scoreAnswers: false,\n    //     numCorrectAnswers: null,\n    //     perfectScore: false\n    // });\n    /*Time to think about state. This is what will change based on user input:\n        1. The selected answer of each question\n        2. The button will only be active once all questions are answered.\n        3. The number of correct answers once submitted.\n    */\n    console.log(quizState);\n\n    useEffect(() => fetchRawData(), []);\n\n    function getQuizState(rawDataArray) {\n        return (rawDataArray.map(question => {\n            return ({\n                id: question.question,\n                question: question.question,\n                incorrectAnswers: question.incorrect_answers,\n                correctAnswer: question.correct_answer,\n                answers: shuffle([...question.incorrect_answers, question.correct_answer]),\n                selectedAnswer: \"\"\n            })\n        }))\n    }    \n\n    function fetchRawData() {\n        fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(\n                      `This is an HTTP error: The status is ${response.status}`\n                    );\n                }\n                return response.json();\n            })\n            .then((rawData) => {\n                setQuizState(getQuizState(rawData.results));\n                setError(null);\n            })\n            .catch((err) => {\n                setError(err.message);\n                setQuizState(null);\n            })\n            .finally(() => setIsLoading(false));\n    };\n    //bug because initial state is empty array so this stays true\n    useEffect(() => {\n        const answersArray = quizState.filter(question => !question.selectedAnswer )\n        if (answersArray.length === 0) {\n            setAllAnswered(true);\n        } \n    }, [quizState]);\n\n    console.log(allAnswered);\n    \n    function handleChange(event, id) {\n        const { value } = event.target;\n        setQuizState(prev => {\n            return (prev.map(question => {\n                return question.id === id ? {...question, selectedAnswer: value} : question\n            }))\n        })\n    };\n  \n    function handleSubmit(event) {\n        event.preventDefault();\n        if (allAnswered) {\n            const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer)\n            setNumCorrectAnswers(scoreAnswersArray.length);\n            setCheckAnswers(true);\n            // if (scoreAnswersArray.length === 5) {\n            //     props.setPerfectScore(true);\n            // }\n        } else {\n            return false;\n        }\n    }\n    \n\n    \n   \n    const quizElements = quizState.map(question => (\n        <QuizCard key={nanoid()}>\n            <Question question={question.question}/>\n            <Answer answer={question.answers[0]} \n                    id={question.id} \n                    selectedAnswer={question.selectedAnswer}\n                    handleChange={handleChange}/>\n            <Answer answer={question.answers[1]} \n                    id={question.id} \n                    selectedAnswer={question.selectedAnswer}\n                    handleChange={handleChange}/>\n            <Answer answer={question.answers[2]} \n                    id={question.id} \n                    selectedAnswer={question.selectedAnswer}\n                    handleChange={handleChange}/>\n            <Answer answer={question.answers[3]} \n                    id={question.id} \n                    selectedAnswer={question.selectedAnswer}\n                    handleChange={handleChange}/>\n        </QuizCard>\n    ));\n    \n\n    return (\n        <>\n        <main className= \"quiz-page\">\n            {isLoading && <div className='loading-page'>Loading...</div>}\n            {!isLoading &&<form onSubmit={checkAnswers ? (event)=>props.newGame(event) : handleSubmit}>\n                {quizElements}\n                <div className='btn-container'>\n                    <button className={allAnswered ? 'button-check' : 'button-check button-check-disabled'}\n                            onMouseEnter={() => setShowErrorMsg(true)}\n                            onMouseLeave={() => setShowErrorMsg(false)}>\n                        {checkAnswers ? 'Play Again' : 'Check answers'}\n                    </button> \n                    {showErrorMsg && !allAnswered && <h3 id='error-message' className='message'>Please answer all questions</h3>}\n                    {checkAnswers && <h3 className='message'>You scored {numCorrectAnswers}/5 correct answers</h3>}\n                </div>\n            </form>}\n        </main>\n        </>\n    )\n}\n\n{/*<form onSubmit={checkAnswers ? (event)=>props.newGame(event) : handleSubmit}>*/}\n\n\n\n// //Apply conditional styling after scoring answers\n// function getAnswerClass() {\n//     if (props.checkAnswers) {\n//         if (answer === correctAnswer) {\n//             return ({\n//                 backgroundColor: '#94D7A2',\n//                 borderColor: '#94D7A2'\n//             })\n//         } else if (answer === selectedAnswer) {\n//             return ({\n//                 backgroundColor: '#F8BCBC',\n//                 borderColor: '#F8BCBC',\n//                 opacity: 0.5\n//             })\n//         } else {\n//             return ({\n//                 color: '#4D5B9E',\n//                 borderColor: '#4D5B9E',\n//                 opacity: 0.5\n//             })\n//         }\n//     } else {\n//         return {}\n//     }\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}