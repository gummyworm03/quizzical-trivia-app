{"ast":null,"code":"var _jsxFileName = \"/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\nimport Confetti from 'react-confetti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function QuizPage(props) {\n  _s();\n  const [quizState, setQuizState] = useState(getQuizState());\n  const [allAnswered, setAllAnswered] = useState(false);\n  const [checkAnswers, setCheckAnswers] = useState(false);\n  const [numCorrectAnswers, setNumCorrectAnswers] = useState(null);\n  const [showError, setShowError] = useState(false);\n\n  //helper function to shuffle answers\n  function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n  function getQuizState() {\n    return props.quizData.map(question => {\n      return {\n        id: question.question,\n        incorrectAnswers: question.incorrect_answers,\n        correctAnswer: question.correct_answer,\n        answers: \"\",\n        selectedAnswer: null\n      };\n    });\n  }\n\n  //shuffle answers only once\n  useEffect(() => {\n    setQuizState(() => {\n      return props.quizData.map(question => {\n        return {\n          id: question.question,\n          incorrectAnswers: question.incorrect_answers,\n          correctAnswer: question.correct_answer,\n          answers: shuffle([...question.incorrect_answers, question.correct_answer]),\n          selectedAnswer: null\n        };\n      });\n    });\n  }, []);\n  useEffect(() => {\n    const answersArray = quizState.filter(question => !question.selectedAnswer);\n    if (answersArray.length === 0) {\n      setAllAnswered(true);\n    }\n  }, [quizState]);\n  function handleChange(event, id) {\n    const {\n      value\n    } = event.target;\n    setQuizState(prev => {\n      return prev.map(question => {\n        return question.id === id ? {\n          ...question,\n          selectedAnswer: value\n        } : question;\n      });\n    });\n  }\n  console.log(quizState);\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (allAnswered) {\n      const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer);\n      setNumCorrectAnswers(scoreAnswersArray.length);\n      setCheckAnswers(true);\n      if (numCorrectAnswers === 5) {\n        setPerfectScore(true);\n      }\n    } else {\n      return false;\n    }\n  }\n  const quizElements = props.quizData.map(question => /*#__PURE__*/_jsxDEV(QuizCard, {\n    id: question.question,\n    question: question.question,\n    quizState: quizState,\n    checkAnswers: checkAnswers,\n    handleChange: handleChange\n  }, nanoid(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this));\n  //{props.started ? \"quiz-page fade-in\" : \"quiz-page\"}\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [props.perfectScore && /*#__PURE__*/_jsxDEV(Confetti, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"quiz-page\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: checkAnswers ? event => props.newGame(event) : handleSubmit,\n        children: [quizElements, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: allAnswered ? 'button-check' : 'button-check button-check-disabled',\n            onMouseEnter: () => setShowError(true),\n            onMouseLeave: () => setShowError(false),\n            children: checkAnswers ? 'Play Again' : 'Check answers'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), showError && !allAnswered && /*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"error-message\",\n            className: \"message\",\n            children: \"Please answer all questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 51\n          }, this), checkAnswers && /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"message\",\n            children: [\"You scored \", numCorrectAnswers, \"/5 correct answers\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(QuizPage, \"nbLIWXkFfkVGABdUZhi496ezACE=\");\n_c = QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useEffect","useState","nanoid","QuizCard","Confetti","QuizPage","props","quizState","setQuizState","getQuizState","allAnswered","setAllAnswered","checkAnswers","setCheckAnswers","numCorrectAnswers","setNumCorrectAnswers","showError","setShowError","shuffle","array","i","length","j","Math","floor","random","quizData","map","question","id","incorrectAnswers","incorrect_answers","correctAnswer","correct_answer","answers","selectedAnswer","answersArray","filter","handleChange","event","value","target","prev","console","log","handleSubmit","preventDefault","scoreAnswersArray","setPerfectScore","quizElements","perfectScore","newGame"],"sources":["/Users/Briana/repos/quizzical-trivia-app/src/components/QuizPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { nanoid } from 'nanoid';\nimport QuizCard from './QuizCard';\nimport Confetti from 'react-confetti';\n\nexport default function QuizPage(props) {\n    const [quizState, setQuizState] = useState(getQuizState());\n    const [allAnswered, setAllAnswered] = useState(false);\n    const [checkAnswers, setCheckAnswers] = useState(false);\n    const [numCorrectAnswers, setNumCorrectAnswers] = useState(null);\n    const [showError, setShowError] = useState(false);\n\n    //helper function to shuffle answers\n    function shuffle(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1)); \n          [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n    \n    function getQuizState() {\n        return (props.quizData.map(question => {\n            return ({\n                id: question.question,\n                incorrectAnswers: question.incorrect_answers,\n                correctAnswer: question.correct_answer,\n                answers: \"\",\n                selectedAnswer: null\n            })\n        }))\n    }    \n    \n    //shuffle answers only once\n    useEffect(() => {\n        setQuizState(() => {\n            return (props.quizData.map(question => {\n                return ({\n                    id: question.question,\n                    incorrectAnswers: question.incorrect_answers,\n                    correctAnswer: question.correct_answer,\n                    answers: shuffle([...question.incorrect_answers, question.correct_answer]),\n                    selectedAnswer: null\n                })\n            }))\n        })\n    }, []);\n\n    useEffect(() => {\n        const answersArray = quizState.filter(question => !question.selectedAnswer )\n        if (answersArray.length === 0) {\n            setAllAnswered(true);\n        } \n    }, [quizState]);\n    \n    function handleChange(event, id) {\n        const { value } = event.target;\n        setQuizState(prev => {\n            return (prev.map(question => {\n                return question.id === id ? {...question, selectedAnswer: value} : question\n            }))\n        })\n    }\n    console.log(quizState)\n    function handleSubmit(event) {\n        event.preventDefault();\n        if (allAnswered) {\n            const scoreAnswersArray = quizState.filter(question => question.selectedAnswer === question.correctAnswer)\n            setNumCorrectAnswers(scoreAnswersArray.length);\n            setCheckAnswers(true);\n            if (numCorrectAnswers === 5) {\n                setPerfectScore(true);\n            }\n        } else {\n            return false;\n        }\n        \n    }\n\n    const quizElements = props.quizData.map(question => (\n        <QuizCard \n            key={nanoid()}\n            id={question.question}\n            question={question.question}\n            quizState={quizState}\n            checkAnswers={checkAnswers}\n            handleChange={handleChange}\n            \n        />\n    ))\n//{props.started ? \"quiz-page fade-in\" : \"quiz-page\"}\n    \n\n    return (\n        <>\n        {props.perfectScore && <Confetti />}\n        <main className= \"quiz-page\">\n            <form onSubmit={checkAnswers ? (event)=>props.newGame(event) : handleSubmit}>\n                {quizElements}\n                <div className='btn-container'>\n                    <button className={allAnswered ? 'button-check' : 'button-check button-check-disabled'}\n                            onMouseEnter={() => setShowError(true)}\n                            onMouseLeave={() => setShowError(false)}>\n                        {checkAnswers ? 'Play Again' : 'Check answers'}\n                    </button> \n                    {showError && !allAnswered && <h3 id='error-message' className='message'>Please answer all questions</h3>}\n                    {checkAnswers && <h3 className='message'>You scored {numCorrectAnswers}/5 correct answers</h3>}\n                </div>\n            </form>\n        </main>\n        </>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}